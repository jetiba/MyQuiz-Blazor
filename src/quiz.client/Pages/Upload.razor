@page "/Upload"

@using BlazorInputFile
@using BlazorFileSaver
@using System.IO
@using CsvHelper
@using System.Globalization
@using System.Text

@inject IQuestionService QuestionService
@inject IBlazorFileSaver BFS
@inject IBlobStorageService BlobStorageService

<div class="container page-centered">

<AuthorizeView Roles="Admin">
    <Authorized> 
         <div class="row">
            <div class="col">
                <h1>Quiz Editor</h1>
            </div>
         </div>

          <div class="row" style="margin-top:20px" hidden="@updated">
            <div class="col">
                <h5><a href="/upload" @onclick="@(e => SaveFile(e))">Clicca qui</a> per scaricare il template per caricare le nuove domande</h5>
            </div>  
        </div>

        <div class="drag-drop-zone" hidden="@updated">
            <InputFile OnChange="ViewFile" />
            @status
        </div>

        <div class="row" style="margin-top:20px">
            <div class="col">
                <InputFile multiple OnChange="SelectContent" hidden="@contentSelected"/>
                <br />
                <p> Nota per il caricamento dei contenuti degli sponsor:</p>
                <p> Devono essere caricati due file: un file di testo (con nome "testo.txt") contenente la descrizione breve dello sponsor e un file immagine (con nome "logo.png") per il logo. </p> <br />
            </div>
        </div>
        @if (selectedFiles.Count == 2)
        {
            foreach (var file in selectedFiles)
            {
                var isLoading = file.Data.Position > 0;

                <div class="file-row">
                    <!-- File info -->
                    <div>
                        <h2>@file.Name</h2>
                        Tipo di file: <strong>@file.Type</strong>
                    </div>

                    <!-- Upload button -->
                    <button @onclick="@(e => LoadFile(file, e))" disabled="@isLoading">
                        @if (!isLoading)
                        {
                            <span>Carica</span>
                        }
                        else
                        {
                            <span>Caricato @((100.0 * file.Data.Position / file.Size).ToString("0"))%</span>
                        }
                    </button>
                </div>
            }
        }
        

        @if (records.Count > 0)
        {
            <div class="row">
                <div class="col">
                    Il file @fileName Ã¨ stato caricato con successo <br />
                    Sono state caricate @records.Count domande
                </div>
            </div>

            <div class="table-responsive">
                <table class="table">
                    <thead>
                        <tr>
                            <th scope="col">#</th>
                            <th scope="col">Domanda</th>
                            <th scope="col">Risposta 1</th>
                            <th scope="col">Risposta 2</th>
                            <th scope="col">Risposta 3</th>
                            <th scope="col">Soluzione</th>
                        </tr>
                    </thead>
                    <tbody>
                        @foreach (var f in records)
                        {
                            <tr>
                                <th scope="row">@f.QuestionID</th>
                                <td> @f.QuestionText</td>
                                <td>@f.Answer1</td>
                                <td>@f.Answer2</td>
                                <td>@f.Answer3</td>
                                <td>@f.Solution</td>
                            </tr>
                        }
                    </tbody>
                </table>
            </div>
        }

</Authorized>
   <NotAuthorized>
      <div class="row">
            <div class="col rounded-borders">
                Questi contenuti sono disponibili solo per gli amministratori del quiz 
            </div>
        </div>
   </NotAuthorized>
</AuthorizeView>

</div>
@code {
    const string DefaultStatus = "Drop a text file here to view it, or click to choose a file";
    const int MaxFileSize = 5 * 1024 * 1024; // 5MB
    string status = DefaultStatus;

    string fileName;

    bool updated = false;
    

    List<Question> records = new List<Question>();

    List<IFileListEntry> selectedFiles = new List<IFileListEntry>();

    bool contentSelected = false;

    public async Task SaveFile(MouseEventArgs e)
    {
        var data = await QuestionService.GetTemplateFile();

       await BFS.SaveAs("Template.csv", data, "text/csv");
    }

    async Task ViewFile(IFileListEntry[] files)
    {
        var file = files.FirstOrDefault();
        if (file == null)
        {
            return;
        }
        else if (file.Size > MaxFileSize)
        {
            status = $"That's too big. Max size: {MaxFileSize} bytes.";
        }
        else
        {
            status = "Loading...";

            fileName = file.Name;

            using (var stream = new MemoryStream())
            {
                await file.Data.CopyToAsync(stream);
                stream.Seek(0, SeekOrigin.Begin);
                var reader = new System.IO.StreamReader(stream, Encoding.UTF7);
                var delimiter = DetectDelimiter(reader);
                using (var csv = new CsvReader(reader, CultureInfo.CurrentUICulture))
                {
                    //csv.Configuration.Delimiter = ",";
                    csv.Configuration.Delimiter = delimiter;
                    csv.Read();
                    csv.ReadHeader();
                    while (csv.Read())
                    {
                        var record = new Question
                        {
                            QuestionID = Guid.NewGuid(),
                            QuestionText = csv.GetField("QuestionText"),
                            Answer1 = csv.GetField("Answer1"),
                            Answer2 = csv.GetField("Answer2"),
                            Answer3 = csv.GetField("Answer3"),
                            Solution = csv.GetField("Solution")
                        };
                        if(!record.HasEmptyProperties())
                        {
                            records.Add(record);
                        }
                    }
                    updated = await QuestionService.AddQuestions(records);

                    status = updated ? "Succeded" : "Failed";

                    if(updated){
                        records = await QuestionService.GetQuestions();
                    }
                }
            }
        }
    }

    public static string DetectDelimiter(StreamReader reader)
    {
        var possibleDelimiters =  new List<string> {",",";","\t","|"};

        var headerLine = reader.ReadLine();

        reader.BaseStream.Position = 0;
        reader.DiscardBufferedData();

        foreach (var possibleDelimiter in possibleDelimiters)
        {
            if (headerLine.Contains(possibleDelimiter))
            {
                return possibleDelimiter;
            }
        }

        return possibleDelimiters[0];
    }

    void SelectContent(IFileListEntry[] files)
    {
        contentSelected = true;
        selectedFiles = files.ToList();
    }

    async Task LoadFile(IFileListEntry file, MouseEventArgs e)
    {
        file.OnDataRead += (sender, eventArgs) => InvokeAsync(StateHasChanged);

        using (StreamContent streamContent = new StreamContent(file.Data))
        {
            await BlobStorageService.PutContentInBlobAsync(streamContent, file.Name);
        }
    }
}