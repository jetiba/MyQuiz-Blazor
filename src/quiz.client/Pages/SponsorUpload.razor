@page "/SponsorUpload"

@using BlazorInputFile
@using BlazorFileSaver
@using System.IO
@using CsvHelper
@using System.Globalization
@using System.Text

@inject IBlazorFileSaver BFS
@inject IBlobStorageService BlobStorageService

<div class="container page-centered">

<AuthorizeView Roles="Admin">
    <Authorized> 
         <div class="row">
            <div class="col">
                <h1>Editor Autori</h1>
            </div>
         </div>

        <div class="row" style="margin-top:20px">
            <div class="col">
                <InputFile multiple OnChange="SelectContent" hidden="@contentSelected"/>
                <br />
                <p> Nota per il caricamento dei contenuti degli autori:</p>
                <p> Devono essere caricati due file: un file di testo (con nome "testo.txt") contenente la descrizione breve dell'autore e un file immagine (con nome "logo.png") per il logo. </p> <br />
            </div>
        </div>
        @if (selectedFiles.Count == 2)
        {
            foreach (var file in selectedFiles)
            {
                var isLoading = file.Data.Position > 0;

                <div class="file-row">
                    <!-- File info -->
                    <div>
                        <h2>@file.Name</h2>
                        Tipo di file: <strong>@file.Type</strong>
                    </div>

                    <!-- Upload button -->
                    <button @onclick="@(e => LoadFile(file, e))" disabled="@isLoading">
                        @if (!isLoading)
                        {
                            <span>Carica</span>
                        }
                        else
                        {
                            <span>Caricato @((100.0 * file.Data.Position / file.Size).ToString("0"))%</span>
                        }
                    </button>
                </div>
            }
        }
</Authorized>
   <NotAuthorized>
      <div class="row">
            <div class="col rounded-borders">
                Questi contenuti sono disponibili solo per gli amministratori del quiz 
            </div>
        </div>
   </NotAuthorized>
</AuthorizeView>

</div>
@code {
    
    List<IFileListEntry> selectedFiles = new List<IFileListEntry>();

    bool contentSelected = false;

    void SelectContent(IFileListEntry[] files)
    {
        contentSelected = true;
        selectedFiles = files.ToList();
    }

    async Task LoadFile(IFileListEntry file, MouseEventArgs e)
    {
        file.OnDataRead += (sender, eventArgs) => InvokeAsync(StateHasChanged);

        using (StreamContent streamContent = new StreamContent(file.Data))
        {
            await BlobStorageService.PutContentInBlobAsync(streamContent, file.Name);
        }
    }
}