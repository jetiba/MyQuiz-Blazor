@page "/CountDown"
@using System.Timers
@inject ILeaderboardService LeaderboardService
@inject AuthenticationStateProvider AuthenticationStateProvider
@inject IQuestionService QuestionService


    <div class="container page-centered">

        <div class="row">
            @if(task != listFoo.Count){
                <div class="col rounded-borders">
                        Domanda: @task
                </div>
                <div class="col-3 rounded-borders">                      
                        Punti: @points
                </div>
            }
            else {
                <a class="btn btn-primary" href="leaderboard" role="button">Vedi la classifica !</a>
                <div class="alert alert-danger" role="alert" style="margin-bottom: 0">
                    Gioco completato!
                </div>
                <div class="alert alert-secondary" role="alert" style="margin-bottom: 0">
                    Hai totalizzato @points punti
                </div>                 
            }
        </div>
    </div>


    @if(task != listFoo.Count){
        <div class="container">
            <div class="row">
                <div class="col rounded-borders-full">
                        @question              
                </div>
                @if(QuestionService.GetTime() > 0){
                    <div class="col-3 rounded-borders-timer">                      
                            @QuestionService.GetTime()
                    </div>
                }
                else if(!disable)
                {
                    <div class="col rounded-borders-alert">Tempo Scaduto!!</div>
                }
                 
            </div>
        </div>
            <div class="row">
                <div class="col">
                @foreach(var a in listA){
                    <button type="button" 
                            class="btn btn-outline-primary btn-lg btn-block" 
                            disabled="@disable"
                            @onclick="@(e => CheckAnswer(e, a.Key))" style="display: block; margin-bottom: 5px;">@a.Value</button>
                }
                </div>
            </div>
            <div class="row">
                @if(result == "CORRECT"){
                    <div class="col rounded-borders-success">CORRECT</div>
                }
                else if(result == "INCORRECT"){
                    <div class="col rounded-borders-alert">INCORRECT</div>
                }  
            </div>
             
    }

@code {
    [Parameter]
    public RenderFragment TaskComponent { get; set; }
    int task = 0;
    @* int time = 0; *@
    int valuebar = 0;
    int points = 0;
    string question = ""; 
    List<string> listQ;
    List<Question> listFoo = new List<Question>();

    bool disable = false;

    Dictionary<int,string> listA = new Dictionary<int, string>();
    Timer aTimer;
    string result = "";

    string username = "";

    string solution = "";

    protected override async Task OnInitializedAsync()
    {  
        var authState = await AuthenticationStateProvider.GetAuthenticationStateAsync();
        username = authState.User.Identity.Name;
        aTimer = await QuestionService.GetTimer();
        aTimer.Elapsed += OnTimedEvent;
        
        listFoo = await QuestionService.GetQuestions();
        
        SetGame();
    }

    void CheckAnswer(MouseEventArgs e, int answer)
    {
        disable = true;
        if(answer.ToString() == solution){
            //TODO => check if already answer
            points++;
            result = "CORRECT";
        }else{
            result = "INCORRECT";
        }

        StateHasChanged();
    }

    void SetGame(){

        task = QuestionService.GetQuestionNumber();
        if (task != listFoo.Count)
        {
            question = listFoo[task].QuestionText;
            solution = "3"; //TODO 
            listA.Clear();
            listA.Add(1, listFoo[task].Answer1);
            listA.Add(2, listFoo[task].Answer2);
            listA.Add(3, listFoo[task].Answer3);
        }
        result = "";
        disable = false;
    }

    void OnTimedEvent(Object source, ElapsedEventArgs e)
    {
        if(QuestionService.GetTime() <= 0)
        {
            if(task < listFoo.Count){
                valuebar = valuebar + 33;
                SetGame();
            }     
            if(task == listFoo.Count){
                valuebar = 100;
                //update points in db
                LeaderboardService.AddPoints(new Leaderboard(){
                    Username = username,
                    Points = points
                });
                // TODO in service => aTimer.Stop();
            }      
        }

        StateHasChanged();
    }
}