@page "/CountDown"
@using System.Timers
@inject ILeaderboardService LeaderboardService
@inject AuthenticationStateProvider AuthenticationStateProvider

<h3>Quiz Game</h3>

    <div class="container">
        <div class="row">
            <div class="col">
                @if(task != 4){
                    <div class="alert alert-primary" role="alert" style="margin-bottom: 0">
                            Task: @task
                    </div>  
                }
                else {
                    <a class="btn btn-primary" href="leaderboard" role="button">Vedi la classifica !</a>
                    <div class="alert alert-danger" role="alert" style="margin-bottom: 0">
                        Gioco completato!
                    </div>
                    <div class="alert alert-secondary" role="alert" style="margin-bottom: 0">
                        Hai totalizzato @points punti
                    </div>
                    
                }
                <div class="progress" style="margin-bottom: 5px;">
                    <div class="progress-bar progress-bar-striped progress-bar-animated" role="progressbar" aria-valuenow="@valuebar" aria-valuemin="0" aria-valuemax="100" style="width: @valuebar%;"></div>
                </div>              
            </div>
        </div>
    </div>

    @if(task != 4){
        <div class="container">
            <div class="row">
                <div class="col">
                    <p style="display: block">
                        Question: @question per fare la prova di una domanda un po' più lunga rispetto alle altre per capire come va a capo e come si presenta nella UI - mi serve che sia ancora più òlunga se no non posso capire bene come funziona il layout di questo sito web in ogni caso possibile
                    </p>              
                </div>
                <div class="col">
                    @if(time > 0){
                        <div class="alert alert-secondary" role="alert" style="display: block">
                            Timer: @time
                        </div>
                        <div class="alert alert-secondary" role="alert" style="display: block">
                            Point: @points
                        </div>
                    }
                    else{
                        if(String.IsNullOrEmpty(result)){
                            <div class="alert alert-danger" role="alert">Time elapsed!!</div>
                        }
                        else if(result == "CORRECT"){
                            <div class="alert alert-success" role="alert">CORRECT</div>
                        }
                        else{
                            <div class="alert alert-danger" role="alert">INCORRECT</div>
                        } 
                    }     
                </div>
            </div>
            <div class="row">
                <div class="col">
                @foreach(var a in listA){
                    <button type="button" class="btn btn-outline-primary btn-lg btn-block" @onclick="@(e => CheckAnswer(e, a.Key))" style="display: block; margin-bottom: 5px;">@a.Value</button>
                }
                </div>
            </div>
        </div>
    }

@code {
    [Parameter]
    public RenderFragment TaskComponent { get; set; }
    int task = 0;
    int time = 0;
    int valuebar = 0;
    int points = 0;
    string question = ""; 
    List<string> listQ;

    Dictionary<int,string> listA = new Dictionary<int, string>();
    Timer aTimer;
    string result = "";

    string username = "";

    protected override async Task OnInitializedAsync()
    {  
        var authState = await AuthenticationStateProvider.GetAuthenticationStateAsync();
        username = authState.User.Identity.Name;
        task = 1;
        listQ = new List<string>() { "q1", "q2", "q3" };
        @* to change with the check in the DB *@
        listA.Add(1, "answer1");
        listA.Add(2, "answer2");
        listA.Add(3, "answer3");
        @*  *@
        SetGame();
    }

    void CheckAnswer(MouseEventArgs e, int answer){
        aTimer.Stop();

        @* logic to check answer (or REST API request) *@
        if(answer == 1){
            points++;
            result = "CORRECT";
        }else{
            result = "INCORRECT";
        }
        @* think a logic to restart the timer better than this one *@
        time = 0;

        StateHasChanged();
        aTimer.Start();
    }

    void SetGame(){

        //TODO: read the question somewhere and display it
            time = 10;
            question = task != 4 ? listQ[task-1] : "";
            result = "";
            SetTimer();
    }

    void SetTimer()
    {
        // Create a timer with a one second interval.
        aTimer = new System.Timers.Timer(1000);
        // Hook up the Elapsed event for the timer. 
        aTimer.Elapsed += OnTimedEvent;
        aTimer.AutoReset = true;
        aTimer.Enabled = true;
    }

    void OnTimedEvent(Object source, ElapsedEventArgs e)
    {
        if(time > 0)
        {
            time--;       
        }
        else
        {
            if(task < 4){
                task++;
                valuebar = valuebar + 33;
                aTimer.Dispose();
                SetGame();
            }     
            if(task == 4){
                valuebar = 100;
                //update points in db
                LeaderboardService.AddPoints(new Leaderboard(){
                    Username = username,
                    Points = points
                });
                aTimer.Stop();
            }      
        }

        StateHasChanged();
    }
}