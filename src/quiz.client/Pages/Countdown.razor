@page "/CountDown"
@using System.Timers
@inject ILeaderboardService LeaderboardService
@inject AuthenticationStateProvider AuthenticationStateProvider
@inject IQuestionService QuestionService


    <div class="container page-centered">

        @if(containsQuestions && task != 0){

            <div class="row">
                @if(task != listFoo.Count+1){
                    <div class="col rounded-borders">
                            Domanda: @task
                    </div>
                    <div class="col-3 rounded-borders">                      
                            Punti: @points
                    </div>
                }
                else {
                    <div class="col rounded-borders-full">
                        Gioco completato!
                    </div>
                    <div class="col rounded-borders">
                        Hai totalizzato @points punti
                    </div>
                    <div class="col rounded-borders">
                        <a href="/leaderboard">Vedi la classifica</a>
                    </div>              
                }
            </div>


            @if(task != listFoo.Count+1){
                <div class="container">
                    <div class="row">
                        <div class="col rounded-borders-full">
                                @question              
                        </div>
                        @* @if(QuestionService.GetTime() > 0){ *@
                            <div class="col-3 rounded-borders-timer">                      
                                    @QuestionService.GetTime()
                            </div>
                        @* } *@
                        
                        
                    </div>
                </div>
                    <div class="row">
                        <div class="col">
                        @foreach(var a in listA){
                            <button type="button" 
                                    class="btn btn-outline-primary btn-lg btn-block" 
                                    disabled="@disable"
                                    @onclick="@(e => CheckAnswer(e, a.Value))" style="display: block; margin-bottom: 5px;">@a.Value</button>
                        }
                        </div>
                    </div>
                    <div class="row">
                        @if(result == "CORRECT"){
                            <div class="col rounded-borders-success">CORRECT</div>
                        }
                        else if(result == "INCORRECT"){
                            <div class="col rounded-borders-alert">INCORRECT</div>
                        } 
                        else if(disable && QuestionService.GetTime() == 0)
                        {
                            <div class="col rounded-borders-alert">Tempo Scaduto!!</div>
                        } 
                    </div>
                    
            }
        }
        else{
            <div class="row">
                <div class="col rounded-borders">
                      Attendi, tra poco saranno disponibili nuove domande...
                </div>
            </div>        
        }
</div>
@code {
    [Parameter]
    public RenderFragment TaskComponent { get; set; }
    int task = 0;
    int points = 0;
    string question = ""; 
    List<string> listQ;
    List<Question> listFoo = new List<Question>();

    bool disable = false;

    Dictionary<int,string> listA = new Dictionary<int, string>();
    Timer aTimer;
    string result = "";

    string username = "";

    string solution = "";

    bool containsQuestions = false;

    protected override async Task OnInitializedAsync()
    {  
        var authState = await AuthenticationStateProvider.GetAuthenticationStateAsync();
        username = authState.User.Identity.Name;
        QuestionService.GetTimer(ref aTimer);
        aTimer.Elapsed += OnTimedEvent;
        
        listFoo = await QuestionService.GetQuestions();

        containsQuestions = listFoo.Count != 0;

        QuestionService.StartTime();
        
        @* SetGame(); *@
    }

    void CheckAnswer(MouseEventArgs e, string answer)
    {
        disable = true;
        if(answer == solution){
            //TODO => check if already answer
            points++;
            result = "CORRECT";
        }else{
            result = "INCORRECT";
        }

        StateHasChanged();
    }

    void SetGame(){

        task = QuestionService.GetQuestionNumber();
        if (task != listFoo.Count+1)
        {
            question = listFoo[task-1].QuestionText;
            solution = listFoo[task-1].Solution;
            listA.Clear();
            listA.Add(1, listFoo[task-1].Answer1);
            listA.Add(2, listFoo[task-1].Answer2);
            listA.Add(3, listFoo[task-1].Answer3);
        }
        result = "";
        disable = false;
    }

    void OnTimedEvent(Object source, ElapsedEventArgs e)
    {
        if(QuestionService.GetTime() == 0) {
            disable = true;
        }
        if(QuestionService.GetTime() == 10)
        {
            if(task < listFoo.Count+1){
                SetGame();
            }     
            if(task == listFoo.Count+1){
                //update points in db
                LeaderboardService.AddPoints(new Leaderboard(){
                    Username = username,
                    Points = points
                });
                // TODO in service
                aTimer.Dispose();
            }      
        }

        StateHasChanged();
    }
}